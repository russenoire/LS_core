# question1
numbers = [1, 2, 2, 3]
numbers.uniq

puts numbers
# -->
1
2
2
3

# question2
! is used to indicate destructive methods (not always a perfect indicator),
while ? is used for 'predicate' methods, or methods that check for truth/falsity
it is also the ternary operator

1. != means not equal to and it is used in boolean expressions
2. ! as a prefix turns a value into a boolean and negates it.
3. ! as a postfix on methods usually indicate that they mutate their callers.
4. ? is the ternary operator, and placed before something means that what it
  precedes is what its containing boolean expression will output if it is false
5. ? as a postfix on a method indicates that it tests for truth/falsity.
6. !! as a prefix turns a value into a boolean.

# question3
advice = "Few things in life are as important as house training your pet dinosaur."
advice.sub!('important', 'urgent')
# how would i know whether all occurrences need replacing? ASK.

# question4
numbers = [1, 2, 3, 4, 5]

numbers.delete_at(1)
# --> [1, 3, 4, 5]
numbers.delete(1)
# --> [2, 3, 4, 5]

#question5
(10..100).include?(45)
# cover? or member? also work

# question6
famous_words = "seven years ago..."

# famous_words.insert("Fourscore and ")
# famous_words = "Fourscore and " + famous_words

# question7
def add_eight(number)
  number + 8
end

number = 2

how_deep = "number"
5.times { how_deep.gsub!("number", "add_eight(number)") }

p how_deep

eval(how_deep)
# --> 42

# question8
given this:
flintstones = ["Fred", "Wilma"]
flintstones << ["Barney", "Betty"]
flintstones << ["BamBam", "Pebbles"]
make flintstones un-nested.

# --> flintstones.flatten!

# question9
given this:
flintstones = { "Fred" => 0,
  "Wilma" => 1,
  "Barney" => 2,
  "Betty" => 3, 
  "BamBam" => 4,
  "Pebbles" => 5 }

# --> flintstones = flintstones.delete_if{ ||key, val| key != "Barney" }.flatten!
# flintstones.assoc("Barney") <-- #todayilearned
