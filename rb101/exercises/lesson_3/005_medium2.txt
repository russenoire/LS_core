# # question3
def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param << "rutabaga"
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"

# --> "My string looks like this now: pumpkins"
# --> "My array looks like this now: ["pumpkins", "rutabaga"]
# --> the += operator is a reassignment operator. my_string and a_string_param
# --> don't point to the same object after tricky_method is called, but my_array
# --> and an_array_param still do. so my_array_param is apparently mutated within

# question5
def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param << "rutabaga"
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"

# --> i would have used the shovel operator for both string and array in
# --> tricky_method() so that the method actually mutates both callers, but just
# --> modifying both string and array locally, then explicitly returning them is
# --> simpler


# question6
def color_valid(color)
  if color == "blue" || color == "green"
    true
  else
    false
  end
end

# --> def color_valid(color)
# -->   color == ("blue" || "green")
# --> end
